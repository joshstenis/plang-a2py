
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ASSIGN BEGIN COLON COMMA COMMENT DIV ELSE END EQ FOREACH GEQ GT ID IF IN LBRACK LEQ LITERAL_STR LPAREN LT MUL NEQ NUM OR RBRACK READ REPEAT RPAREN SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON stmt \n                 | stmtstmt : assignment \n            | read \n            | write \n            | while \n            | repeat \n            | block \n            | foreach \n            | if_stmtassignment : varref ASSIGN l_exprread : READ varlistwrite : WRITE expr_listwhile : WHILE l_expr blockrepeat : REPEAT stmt_list UNTIL l_exprblock : BEGIN stmt_list ENDforeach : FOREACH ID IN LPAREN a_expr COLON a_expr RPAREN stmtif_stmt : IF l_expr THEN stmt_list ELSE else_stmtelse_stmt : ELSE stmt\n                 | a_expr : a_expr a_op a_expr\n              | SUB a_expr \n              | varref\n              | NUM \n              | LITERAL_STR \n              | LPAREN a_expr RPARENa_op : ADD \n            | SUB \n            | MUL \n            | DIVvarref : ID \n              | varref LBRACK a_expr RBRACKl_expr : l_expr l_op l_expr\n              | l_expr oprel a_expr\n              | a_expr\n              | LPAREN l_expr RPARENl_op : OR \n            | ANDoprel : LT\n             | GT\n             | LEQ\n             | GEQ\n             | EQ\n             | NEQvarlist : varlist COMMA varlist\n               | varrefexpr_list : a_expr\n                 | expr_list COMMA a_expr'
    
_lr_action_items = {'READ':([0,16,17,21,66,69,84,88,],[13,13,13,13,13,13,13,13,]),'WRITE':([0,16,17,21,66,69,84,88,],[14,14,14,14,14,14,14,14,]),'WHILE':([0,16,17,21,66,69,84,88,],[15,15,15,15,15,15,15,15,]),'REPEAT':([0,16,17,21,66,69,84,88,],[16,16,16,16,16,16,16,16,]),'BEGIN':([0,16,17,19,21,29,30,31,33,34,50,66,69,70,73,74,75,76,77,84,88,],[17,17,17,-32,17,-24,-25,-26,17,-36,-23,17,17,-33,-22,-27,-34,-35,-37,17,17,]),'FOREACH':([0,16,17,21,66,69,84,88,],[18,18,18,18,18,18,18,18,]),'IF':([0,16,17,21,66,69,84,88,],[20,20,20,20,20,20,20,20,]),'ID':([0,13,14,15,16,17,18,20,21,22,23,28,32,35,43,44,45,46,47,48,49,53,54,55,56,57,58,59,60,61,62,65,66,69,79,83,84,88,],[19,19,19,19,19,19,38,19,19,19,19,19,19,19,19,19,19,-28,-29,-30,-31,19,19,-38,-39,-40,-41,-42,-43,-44,-45,19,19,19,19,19,19,19,]),'$end':([1,21,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,36,37,40,41,50,52,67,70,71,72,73,74,75,76,77,78,80,82,85,87,89,],[21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-48,-24,-25,-26,-36,66,66,-2,-12,-23,-15,-17,-33,-46,-49,-22,-27,-34,-35,-37,-16,66,-21,-19,-20,-18,]),'UNTIL':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,36,40,41,50,52,67,70,71,72,73,74,75,76,77,78,82,85,87,89,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-48,-24,-25,-26,-36,65,-2,-12,-23,-15,-17,-33,-46,-49,-22,-27,-34,-35,-37,-16,-21,-19,-20,-18,]),'END':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,37,40,41,50,52,67,70,71,72,73,74,75,76,77,78,82,85,87,89,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-48,-24,-25,-26,-36,67,-2,-12,-23,-15,-17,-33,-46,-49,-22,-27,-34,-35,-37,-16,-21,-19,-20,-18,]),'ELSE':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,40,41,50,52,67,70,71,72,73,74,75,76,77,78,80,82,85,87,89,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-48,-24,-25,-26,-36,-2,-12,-23,-15,-17,-33,-46,-49,-22,-27,-34,-35,-37,-16,82,84,-19,-20,-18,]),'ASSIGN':([12,19,70,],[22,-32,-33,]),'LBRACK':([12,19,25,29,70,],[23,-32,23,23,-33,]),'SUB':([14,15,19,20,22,23,27,28,29,30,31,32,34,35,42,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,64,65,70,72,73,74,76,79,81,83,86,],[28,28,-32,28,28,28,47,28,-24,-25,-26,28,47,28,47,28,28,-28,-29,-30,-31,47,47,28,28,-38,-39,-40,-41,-42,-43,-44,-45,47,28,-33,47,47,-27,47,28,47,28,47,]),'NUM':([14,15,20,22,23,28,32,35,44,45,46,47,48,49,53,54,55,56,57,58,59,60,61,62,65,79,83,],[30,30,30,30,30,30,30,30,30,30,-28,-29,-30,-31,30,30,-38,-39,-40,-41,-42,-43,-44,-45,30,30,30,]),'LITERAL_STR':([14,15,20,22,23,28,32,35,44,45,46,47,48,49,53,54,55,56,57,58,59,60,61,62,65,79,83,],[31,31,31,31,31,31,31,31,31,31,-28,-29,-30,-31,31,31,-38,-39,-40,-41,-42,-43,-44,-45,31,31,31,]),'LPAREN':([14,15,20,22,23,28,32,35,44,45,46,47,48,49,53,54,55,56,57,58,59,60,61,62,65,68,79,83,],[32,35,35,35,32,32,32,35,32,32,-28,-29,-30,-31,35,32,-38,-39,-40,-41,-42,-43,-44,-45,35,79,32,32,]),'COMMA':([19,24,25,26,27,29,30,31,50,70,71,72,73,74,],[-32,43,-47,44,-48,-24,-25,-26,-23,-33,43,-49,-22,-27,]),'ADD':([19,27,29,30,31,34,42,50,51,64,70,72,73,74,76,81,86,],[-32,46,-24,-25,-26,46,46,46,46,46,-33,46,46,-27,46,46,46,]),'MUL':([19,27,29,30,31,34,42,50,51,64,70,72,73,74,76,81,86,],[-32,48,-24,-25,-26,48,48,48,48,48,-33,48,48,-27,48,48,48,]),'DIV':([19,27,29,30,31,34,42,50,51,64,70,72,73,74,76,81,86,],[-32,49,-24,-25,-26,49,49,49,49,49,-33,49,49,-27,49,49,49,]),'OR':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,55,-36,55,55,-23,55,-36,-33,-22,-27,55,-35,-37,55,]),'AND':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,56,-36,56,56,-23,56,-36,-33,-22,-27,56,-35,-37,56,]),'LT':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,57,-36,57,57,-23,57,-36,-33,-22,-27,57,-35,-37,57,]),'GT':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,58,-36,58,58,-23,58,-36,-33,-22,-27,58,-35,-37,58,]),'LEQ':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,59,-36,59,59,-23,59,-36,-33,-22,-27,59,-35,-37,59,]),'GEQ':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,60,-36,60,60,-23,60,-36,-33,-22,-27,60,-35,-37,60,]),'EQ':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,61,-36,61,61,-23,61,-36,-33,-22,-27,61,-35,-37,61,]),'NEQ':([19,29,30,31,33,34,39,41,50,63,64,70,73,74,75,76,77,78,],[-32,-24,-25,-26,62,-36,62,62,-23,62,-36,-33,-22,-27,62,-35,-37,62,]),'THEN':([19,29,30,31,34,39,50,70,73,74,75,76,77,],[-32,-24,-25,-26,-36,69,-23,-33,-22,-27,-34,-35,-37,]),'RBRACK':([19,29,30,31,42,50,70,73,74,],[-32,-24,-25,-26,70,-23,-33,-22,-27,]),'RPAREN':([19,29,30,31,34,50,51,63,64,70,73,74,75,76,77,86,],[-32,-24,-25,-26,-36,-23,74,77,74,-33,-22,-27,-34,-35,-37,88,]),'COLON':([19,29,30,31,50,70,73,74,81,],[-32,-24,-25,-26,-23,-33,-22,-27,83,]),'IN':([38,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,16,17,69,],[2,36,37,80,]),'stmt':([0,16,17,21,66,69,84,88,],[3,3,3,40,40,3,87,89,]),'assignment':([0,16,17,21,66,69,84,88,],[4,4,4,4,4,4,4,4,]),'read':([0,16,17,21,66,69,84,88,],[5,5,5,5,5,5,5,5,]),'write':([0,16,17,21,66,69,84,88,],[6,6,6,6,6,6,6,6,]),'while':([0,16,17,21,66,69,84,88,],[7,7,7,7,7,7,7,7,]),'repeat':([0,16,17,21,66,69,84,88,],[8,8,8,8,8,8,8,8,]),'block':([0,16,17,21,33,66,69,84,88,],[9,9,9,9,52,9,9,9,9,]),'foreach':([0,16,17,21,66,69,84,88,],[10,10,10,10,10,10,10,10,]),'if_stmt':([0,16,17,21,66,69,84,88,],[11,11,11,11,11,11,11,11,]),'varref':([0,13,14,15,16,17,20,21,22,23,28,32,35,43,44,45,53,54,65,66,69,79,83,84,88,],[12,25,29,29,12,12,29,12,29,29,29,29,29,25,29,29,29,29,29,12,12,29,29,12,12,]),'varlist':([13,43,],[24,71,]),'expr_list':([14,],[26,]),'a_expr':([14,15,20,22,23,28,32,35,44,45,53,54,65,79,83,],[27,34,34,34,42,50,51,64,72,73,34,76,34,81,86,]),'l_expr':([15,20,22,35,53,65,],[33,39,41,63,75,78,]),'a_op':([27,34,42,50,51,64,72,73,76,81,86,],[45,45,45,45,45,45,45,45,45,45,45,]),'l_op':([33,39,41,63,75,78,],[53,53,53,53,53,53,]),'oprel':([33,39,41,63,75,78,],[54,54,54,54,54,54,]),'else_stmt':([82,],[85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','ply-parser.py',84),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','ply-parser.py',87),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','ply-parser.py',88),
  ('stmt -> assignment','stmt',1,'p_stmt','ply-parser.py',91),
  ('stmt -> read','stmt',1,'p_stmt','ply-parser.py',92),
  ('stmt -> write','stmt',1,'p_stmt','ply-parser.py',93),
  ('stmt -> while','stmt',1,'p_stmt','ply-parser.py',94),
  ('stmt -> repeat','stmt',1,'p_stmt','ply-parser.py',95),
  ('stmt -> block','stmt',1,'p_stmt','ply-parser.py',96),
  ('stmt -> foreach','stmt',1,'p_stmt','ply-parser.py',97),
  ('stmt -> if_stmt','stmt',1,'p_stmt','ply-parser.py',98),
  ('assignment -> varref ASSIGN l_expr','assignment',3,'p_assignment','ply-parser.py',101),
  ('read -> READ varlist','read',2,'p_read','ply-parser.py',104),
  ('write -> WRITE expr_list','write',2,'p_write','ply-parser.py',107),
  ('while -> WHILE l_expr block','while',3,'p_while','ply-parser.py',110),
  ('repeat -> REPEAT stmt_list UNTIL l_expr','repeat',4,'p_repeat','ply-parser.py',113),
  ('block -> BEGIN stmt_list END','block',3,'p_block','ply-parser.py',116),
  ('foreach -> FOREACH ID IN LPAREN a_expr COLON a_expr RPAREN stmt','foreach',9,'p_foreach','ply-parser.py',119),
  ('if_stmt -> IF l_expr THEN stmt_list ELSE else_stmt','if_stmt',6,'p_if_stmt','ply-parser.py',122),
  ('else_stmt -> ELSE stmt','else_stmt',2,'p_else_stmt','ply-parser.py',125),
  ('else_stmt -> <empty>','else_stmt',0,'p_else_stmt','ply-parser.py',126),
  ('a_expr -> a_expr a_op a_expr','a_expr',3,'p_a_expr','ply-parser.py',129),
  ('a_expr -> SUB a_expr','a_expr',2,'p_a_expr','ply-parser.py',130),
  ('a_expr -> varref','a_expr',1,'p_a_expr','ply-parser.py',131),
  ('a_expr -> NUM','a_expr',1,'p_a_expr','ply-parser.py',132),
  ('a_expr -> LITERAL_STR','a_expr',1,'p_a_expr','ply-parser.py',133),
  ('a_expr -> LPAREN a_expr RPAREN','a_expr',3,'p_a_expr','ply-parser.py',134),
  ('a_op -> ADD','a_op',1,'p_a_op','ply-parser.py',137),
  ('a_op -> SUB','a_op',1,'p_a_op','ply-parser.py',138),
  ('a_op -> MUL','a_op',1,'p_a_op','ply-parser.py',139),
  ('a_op -> DIV','a_op',1,'p_a_op','ply-parser.py',140),
  ('varref -> ID','varref',1,'p_varref','ply-parser.py',143),
  ('varref -> varref LBRACK a_expr RBRACK','varref',4,'p_varref','ply-parser.py',144),
  ('l_expr -> l_expr l_op l_expr','l_expr',3,'p_l_expr','ply-parser.py',147),
  ('l_expr -> l_expr oprel a_expr','l_expr',3,'p_l_expr','ply-parser.py',148),
  ('l_expr -> a_expr','l_expr',1,'p_l_expr','ply-parser.py',149),
  ('l_expr -> LPAREN l_expr RPAREN','l_expr',3,'p_l_expr','ply-parser.py',150),
  ('l_op -> OR','l_op',1,'p_l_op','ply-parser.py',153),
  ('l_op -> AND','l_op',1,'p_l_op','ply-parser.py',154),
  ('oprel -> LT','oprel',1,'p_oprel','ply-parser.py',157),
  ('oprel -> GT','oprel',1,'p_oprel','ply-parser.py',158),
  ('oprel -> LEQ','oprel',1,'p_oprel','ply-parser.py',159),
  ('oprel -> GEQ','oprel',1,'p_oprel','ply-parser.py',160),
  ('oprel -> EQ','oprel',1,'p_oprel','ply-parser.py',161),
  ('oprel -> NEQ','oprel',1,'p_oprel','ply-parser.py',162),
  ('varlist -> varlist COMMA varlist','varlist',3,'p_varlist','ply-parser.py',165),
  ('varlist -> varref','varlist',1,'p_varlist','ply-parser.py',166),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','ply-parser.py',169),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','ply-parser.py',170),
]
