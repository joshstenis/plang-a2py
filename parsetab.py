
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ASSIGN BEGIN COLON COMMA COMMENT DIV ELSE END EQ FOREACH GEQ GT ID IF IN LBRACK LEQ LITERAL_STR LPAREN LT MUL NEQ NUM OR RBRACK READ REPEAT RPAREN SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON stmt \n                 | stmtstmt : assignment \n            | read \n            | write \n            | while \n            | repeat \n            | block \n            | foreach \n            | if_stmtassignment : varref ASSIGN l_exprread : READ varlistwrite : WRITE expr_listwhile : WHILE l_expr blockrepeat : REPEAT stmt_list UNTIL l_exprblock : BEGIN stmt_list ENDforeach : FOREACH ID IN LPAREN a_expr COLON a_expr RPAREN stmtif_stmt : IF l_expr THEN stmt_list ELSE else_stmtelse_stmt : \n                 | ELSE stmta_expr : a_expr a_op a_expr\n              | SUB a_expr \n              | varref\n              | NUM \n              | LITERAL_STR \n              | LPAREN a_expr RPARENa_op : ADD \n            | SUB \n            | MUL \n            | DIVvarref : ID \n              | varref LBRACK a_expr RBRACKl_expr : l_expr AND l_term\n              | l_terml_term : l_term OR l_fact\n              | l_factl_fact : l_fact oprel a_expr\n              | a_expr\n              | LPAREN l_expr RPARENoprel : LT\n             | GT\n             | LEQ\n             | GEQ\n             | EQ\n             | NEQvarlist : varref\n               | varref COMMA varlistexpr_list : a_expr\n                 | expr_list COMMA a_expr'
    
_lr_action_items = {'READ':([0,16,17,21,68,71,87,91,],[13,13,13,13,13,13,13,13,]),'WRITE':([0,16,17,21,68,71,87,91,],[14,14,14,14,14,14,14,14,]),'WHILE':([0,16,17,21,68,71,87,91,],[15,15,15,15,15,15,15,15,]),'REPEAT':([0,16,17,21,68,71,87,91,],[16,16,16,16,16,16,16,16,]),'BEGIN':([0,16,17,19,21,29,30,31,33,34,35,36,52,68,71,72,75,76,77,78,79,80,87,91,],[17,17,17,-32,17,-24,-25,-26,17,-35,-37,-39,-23,17,17,-33,-22,-27,-34,-36,-38,-40,17,17,]),'FOREACH':([0,16,17,21,68,71,87,91,],[18,18,18,18,18,18,18,18,]),'IF':([0,16,17,21,68,71,87,91,],[20,20,20,20,20,20,20,20,]),'ID':([0,13,14,15,16,17,18,20,21,22,23,28,32,37,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,67,68,71,82,86,87,91,],[19,19,19,19,19,19,40,19,19,19,19,19,19,19,19,19,19,-28,-29,-30,-31,19,19,19,-41,-42,-43,-44,-45,-46,19,19,19,19,19,19,19,19,]),'$end':([1,21,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,35,36,38,39,42,43,52,54,69,72,73,74,75,76,77,78,79,80,81,83,85,88,90,92,],[21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-49,-24,-25,-26,-35,-37,-39,68,68,-2,-12,-23,-15,-17,-33,-48,-50,-22,-27,-34,-36,-38,-40,-16,68,-20,-19,-21,-18,]),'UNTIL':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,35,36,38,42,43,52,54,69,72,73,74,75,76,77,78,79,80,81,85,88,90,92,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-49,-24,-25,-26,-35,-37,-39,67,-2,-12,-23,-15,-17,-33,-48,-50,-22,-27,-34,-36,-38,-40,-16,-20,-19,-21,-18,]),'END':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,35,36,39,42,43,52,54,69,72,73,74,75,76,77,78,79,80,81,85,88,90,92,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-49,-24,-25,-26,-35,-37,-39,69,-2,-12,-23,-15,-17,-33,-48,-50,-22,-27,-34,-36,-38,-40,-16,-20,-19,-21,-18,]),'ELSE':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,29,30,31,34,35,36,42,43,52,54,69,72,73,74,75,76,77,78,79,80,81,83,85,88,90,92,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-32,-13,-47,-14,-49,-24,-25,-26,-35,-37,-39,-2,-12,-23,-15,-17,-33,-48,-50,-22,-27,-34,-36,-38,-40,-16,85,87,-19,-21,-18,]),'ASSIGN':([12,19,72,],[22,-32,-33,]),'LBRACK':([12,19,25,29,72,],[23,-32,23,23,-33,]),'SUB':([14,15,19,20,22,23,27,28,29,30,31,32,36,37,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,66,67,72,74,75,76,79,82,84,86,89,],[28,28,-32,28,28,28,49,28,-24,-25,-26,28,49,28,49,28,28,-28,-29,-30,-31,49,49,28,28,28,-41,-42,-43,-44,-45,-46,28,49,28,-33,49,49,-27,49,28,49,28,49,]),'NUM':([14,15,20,22,23,28,32,37,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,67,82,86,],[30,30,30,30,30,30,30,30,30,30,-28,-29,-30,-31,30,30,30,-41,-42,-43,-44,-45,-46,30,30,30,30,]),'LITERAL_STR':([14,15,20,22,23,28,32,37,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,67,82,86,],[31,31,31,31,31,31,31,31,31,31,-28,-29,-30,-31,31,31,31,-41,-42,-43,-44,-45,-46,31,31,31,31,]),'LPAREN':([14,15,20,22,23,28,32,37,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,67,70,82,86,],[32,37,37,37,32,32,32,64,32,32,-28,-29,-30,-31,37,37,32,-41,-42,-43,-44,-45,-46,64,37,82,32,32,]),'COMMA':([19,25,26,27,29,30,31,52,72,74,75,76,],[-32,45,46,-49,-24,-25,-26,-23,-33,-50,-22,-27,]),'ADD':([19,27,29,30,31,36,44,52,53,66,72,74,75,76,79,84,89,],[-32,48,-24,-25,-26,48,48,48,48,48,-33,48,48,-27,48,48,48,]),'MUL':([19,27,29,30,31,36,44,52,53,66,72,74,75,76,79,84,89,],[-32,50,-24,-25,-26,50,50,50,50,50,-33,50,50,-27,50,50,50,]),'DIV':([19,27,29,30,31,36,44,52,53,66,72,74,75,76,79,84,89,],[-32,51,-24,-25,-26,51,51,51,51,51,-33,51,51,-27,51,51,51,]),'LT':([19,29,30,31,35,36,52,66,72,75,76,78,79,80,],[-32,-24,-25,-26,58,-39,-23,-39,-33,-22,-27,58,-38,-40,]),'GT':([19,29,30,31,35,36,52,66,72,75,76,78,79,80,],[-32,-24,-25,-26,59,-39,-23,-39,-33,-22,-27,59,-38,-40,]),'LEQ':([19,29,30,31,35,36,52,66,72,75,76,78,79,80,],[-32,-24,-25,-26,60,-39,-23,-39,-33,-22,-27,60,-38,-40,]),'GEQ':([19,29,30,31,35,36,52,66,72,75,76,78,79,80,],[-32,-24,-25,-26,61,-39,-23,-39,-33,-22,-27,61,-38,-40,]),'EQ':([19,29,30,31,35,36,52,66,72,75,76,78,79,80,],[-32,-24,-25,-26,62,-39,-23,-39,-33,-22,-27,62,-38,-40,]),'NEQ':([19,29,30,31,35,36,52,66,72,75,76,78,79,80,],[-32,-24,-25,-26,63,-39,-23,-39,-33,-22,-27,63,-38,-40,]),'OR':([19,29,30,31,34,35,36,52,66,72,75,76,77,78,79,80,],[-32,-24,-25,-26,56,-37,-39,-23,-39,-33,-22,-27,56,-36,-38,-40,]),'AND':([19,29,30,31,33,34,35,36,41,43,52,65,66,72,75,76,77,78,79,80,81,],[-32,-24,-25,-26,55,-35,-37,-39,55,55,-23,55,-39,-33,-22,-27,-34,-36,-38,-40,55,]),'THEN':([19,29,30,31,34,35,36,41,52,72,75,76,77,78,79,80,],[-32,-24,-25,-26,-35,-37,-39,71,-23,-33,-22,-27,-34,-36,-38,-40,]),'RBRACK':([19,29,30,31,44,52,72,75,76,],[-32,-24,-25,-26,72,-23,-33,-22,-27,]),'RPAREN':([19,29,30,31,34,35,36,52,53,65,66,72,75,76,77,78,79,80,89,],[-32,-24,-25,-26,-35,-37,-39,-23,76,80,76,-33,-22,-27,-34,-36,-38,-40,91,]),'COLON':([19,29,30,31,52,72,75,76,84,],[-32,-24,-25,-26,-23,-33,-22,-27,86,]),'IN':([40,],[70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,16,17,71,],[2,38,39,83,]),'stmt':([0,16,17,21,68,71,87,91,],[3,3,3,42,42,3,90,92,]),'assignment':([0,16,17,21,68,71,87,91,],[4,4,4,4,4,4,4,4,]),'read':([0,16,17,21,68,71,87,91,],[5,5,5,5,5,5,5,5,]),'write':([0,16,17,21,68,71,87,91,],[6,6,6,6,6,6,6,6,]),'while':([0,16,17,21,68,71,87,91,],[7,7,7,7,7,7,7,7,]),'repeat':([0,16,17,21,68,71,87,91,],[8,8,8,8,8,8,8,8,]),'block':([0,16,17,21,33,68,71,87,91,],[9,9,9,9,54,9,9,9,9,]),'foreach':([0,16,17,21,68,71,87,91,],[10,10,10,10,10,10,10,10,]),'if_stmt':([0,16,17,21,68,71,87,91,],[11,11,11,11,11,11,11,11,]),'varref':([0,13,14,15,16,17,20,21,22,23,28,32,37,45,46,47,55,56,57,64,67,68,71,82,86,87,91,],[12,25,29,29,12,12,29,12,29,29,29,29,29,25,29,29,29,29,29,29,29,12,12,29,29,12,12,]),'varlist':([13,45,],[24,73,]),'expr_list':([14,],[26,]),'a_expr':([14,15,20,22,23,28,32,37,46,47,55,56,57,64,67,82,86,],[27,36,36,36,44,52,53,66,74,75,36,36,79,66,36,84,89,]),'l_expr':([15,20,22,37,64,67,],[33,41,43,65,65,81,]),'l_term':([15,20,22,37,55,64,67,],[34,34,34,34,77,34,34,]),'l_fact':([15,20,22,37,55,56,64,67,],[35,35,35,35,35,78,35,35,]),'a_op':([27,36,44,52,53,66,74,75,79,84,89,],[47,47,47,47,47,47,47,47,47,47,47,]),'oprel':([35,78,],[57,57,]),'else_stmt':([85,],[88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','ply-parser.py',84),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','ply-parser.py',87),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','ply-parser.py',88),
  ('stmt -> assignment','stmt',1,'p_stmt','ply-parser.py',91),
  ('stmt -> read','stmt',1,'p_stmt','ply-parser.py',92),
  ('stmt -> write','stmt',1,'p_stmt','ply-parser.py',93),
  ('stmt -> while','stmt',1,'p_stmt','ply-parser.py',94),
  ('stmt -> repeat','stmt',1,'p_stmt','ply-parser.py',95),
  ('stmt -> block','stmt',1,'p_stmt','ply-parser.py',96),
  ('stmt -> foreach','stmt',1,'p_stmt','ply-parser.py',97),
  ('stmt -> if_stmt','stmt',1,'p_stmt','ply-parser.py',98),
  ('assignment -> varref ASSIGN l_expr','assignment',3,'p_assignment','ply-parser.py',101),
  ('read -> READ varlist','read',2,'p_read','ply-parser.py',104),
  ('write -> WRITE expr_list','write',2,'p_write','ply-parser.py',107),
  ('while -> WHILE l_expr block','while',3,'p_while','ply-parser.py',110),
  ('repeat -> REPEAT stmt_list UNTIL l_expr','repeat',4,'p_repeat','ply-parser.py',113),
  ('block -> BEGIN stmt_list END','block',3,'p_block','ply-parser.py',116),
  ('foreach -> FOREACH ID IN LPAREN a_expr COLON a_expr RPAREN stmt','foreach',9,'p_foreach','ply-parser.py',119),
  ('if_stmt -> IF l_expr THEN stmt_list ELSE else_stmt','if_stmt',6,'p_if_stmt','ply-parser.py',122),
  ('else_stmt -> <empty>','else_stmt',0,'p_else_stmt','ply-parser.py',125),
  ('else_stmt -> ELSE stmt','else_stmt',2,'p_else_stmt','ply-parser.py',126),
  ('a_expr -> a_expr a_op a_expr','a_expr',3,'p_a_expr','ply-parser.py',129),
  ('a_expr -> SUB a_expr','a_expr',2,'p_a_expr','ply-parser.py',130),
  ('a_expr -> varref','a_expr',1,'p_a_expr','ply-parser.py',131),
  ('a_expr -> NUM','a_expr',1,'p_a_expr','ply-parser.py',132),
  ('a_expr -> LITERAL_STR','a_expr',1,'p_a_expr','ply-parser.py',133),
  ('a_expr -> LPAREN a_expr RPAREN','a_expr',3,'p_a_expr','ply-parser.py',134),
  ('a_op -> ADD','a_op',1,'p_a_op','ply-parser.py',137),
  ('a_op -> SUB','a_op',1,'p_a_op','ply-parser.py',138),
  ('a_op -> MUL','a_op',1,'p_a_op','ply-parser.py',139),
  ('a_op -> DIV','a_op',1,'p_a_op','ply-parser.py',140),
  ('varref -> ID','varref',1,'p_varref','ply-parser.py',143),
  ('varref -> varref LBRACK a_expr RBRACK','varref',4,'p_varref','ply-parser.py',144),
  ('l_expr -> l_expr AND l_term','l_expr',3,'p_l_expr','ply-parser.py',147),
  ('l_expr -> l_term','l_expr',1,'p_l_expr','ply-parser.py',148),
  ('l_term -> l_term OR l_fact','l_term',3,'p_l_term','ply-parser.py',151),
  ('l_term -> l_fact','l_term',1,'p_l_term','ply-parser.py',152),
  ('l_fact -> l_fact oprel a_expr','l_fact',3,'p_l_fact','ply-parser.py',155),
  ('l_fact -> a_expr','l_fact',1,'p_l_fact','ply-parser.py',156),
  ('l_fact -> LPAREN l_expr RPAREN','l_fact',3,'p_l_fact','ply-parser.py',157),
  ('oprel -> LT','oprel',1,'p_oprel','ply-parser.py',160),
  ('oprel -> GT','oprel',1,'p_oprel','ply-parser.py',161),
  ('oprel -> LEQ','oprel',1,'p_oprel','ply-parser.py',162),
  ('oprel -> GEQ','oprel',1,'p_oprel','ply-parser.py',163),
  ('oprel -> EQ','oprel',1,'p_oprel','ply-parser.py',164),
  ('oprel -> NEQ','oprel',1,'p_oprel','ply-parser.py',165),
  ('varlist -> varref','varlist',1,'p_varlist','ply-parser.py',168),
  ('varlist -> varref COMMA varlist','varlist',3,'p_varlist','ply-parser.py',169),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','ply-parser.py',172),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','ply-parser.py',173),
]
