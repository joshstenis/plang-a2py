
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ASSIGN BEGIN COLON COMMA COMMENT DIV ELSE END EQ FOREACH GEQ GT ID IF IN LBRACK LEQ LITERAL_STR LPAREN LT MUL NEQ NUM OR RBRACK READ REPEAT RPAREN SEMICOLON SUB THEN UNTIL WHILE WRITEprogram : stmt_list SEMICOLONstmt_list : stmt_list SEMICOLON stmt \n                 | stmtstmt : assignment \n            | read \n            | write \n            | while \n            | repeat \n            | block \n            | foreach \n            | if_stmtassignment : varref ASSIGN l_exprread : READ varlistwrite : WRITE expr_listwhile : WHILE l_expr blockrepeat : REPEAT stmt_list UNTIL l_exprblock : BEGIN stmt_list ENDforeach : FOREACH ID IN LPAREN a_fact COLON a_fact RPAREN stmtif_stmt : IF l_expr THEN stmt_list ELSE else_stmtelse_stmt : \n                 | ELSE stmta_expr : a_expr ADD a_term\n              | a_expr SUB a_term\n              | a_terma_term : a_term MUL a_fact\n              | a_term DIV a_fact\n              | a_facta_fact : varref \n              | NUM \n              | LITERAL_STR \n              | SUB a_fact \n              | LPAREN a_expr RPARENvarref : ID \n              | varref LBRACK a_expr RBRACKl_expr : l_expr AND l_term\n              | l_terml_term : l_term OR l_fact\n              | l_factl_fact : l_fact oprel a_expr\n              | a_expr\n              | LPAREN l_expr RPARENoprel : LT\n             | GT\n             | LEQ\n             | GEQ\n             | EQ\n             | NEQvarlist : varref\n               | varref COMMA varlistexpr_list : a_expr\n                 | expr_list COMMA a_expr'
    
_lr_action_items = {'READ':([0,16,17,21,68,71,90,94,],[13,13,13,13,13,13,13,13,]),'WRITE':([0,16,17,21,68,71,90,94,],[14,14,14,14,14,14,14,14,]),'WHILE':([0,16,17,21,68,71,90,94,],[15,15,15,15,15,15,15,15,]),'REPEAT':([0,16,17,21,68,71,90,94,],[16,16,16,16,16,16,16,16,]),'BEGIN':([0,16,17,19,21,28,30,31,32,33,35,36,37,38,53,68,71,72,75,76,77,78,79,80,81,82,83,90,94,],[17,17,17,-33,17,-24,-27,-28,-29,-30,17,-36,-38,-40,-31,17,17,-34,-22,-23,-25,-26,-32,-35,-37,-39,-41,17,17,]),'FOREACH':([0,16,17,21,68,71,90,94,],[18,18,18,18,18,18,18,18,]),'IF':([0,16,17,21,68,71,90,94,],[20,20,20,20,20,20,20,20,]),'ID':([0,13,14,15,16,17,18,20,21,22,23,29,34,39,47,48,49,50,51,52,56,57,58,59,60,61,62,63,64,67,68,71,85,89,90,94,],[19,19,19,19,19,19,42,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-42,-43,-44,-45,-46,-47,19,19,19,19,19,19,19,]),'$end':([1,21,],[0,-1,]),'SEMICOLON':([2,3,4,5,6,7,8,9,10,11,19,24,25,26,27,28,30,31,32,33,36,37,38,40,41,44,45,53,55,69,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,91,93,95,],[21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-33,-13,-48,-14,-50,-24,-27,-28,-29,-30,-36,-38,-40,68,68,-2,-12,-31,-15,-17,-34,-49,-51,-22,-23,-25,-26,-32,-35,-37,-39,-41,-16,68,-20,-19,-21,-18,]),'UNTIL':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,28,30,31,32,33,36,37,38,40,44,45,53,55,69,72,73,74,75,76,77,78,79,80,81,82,83,84,88,91,93,95,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-33,-13,-48,-14,-50,-24,-27,-28,-29,-30,-36,-38,-40,67,-2,-12,-31,-15,-17,-34,-49,-51,-22,-23,-25,-26,-32,-35,-37,-39,-41,-16,-20,-19,-21,-18,]),'END':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,28,30,31,32,33,36,37,38,41,44,45,53,55,69,72,73,74,75,76,77,78,79,80,81,82,83,84,88,91,93,95,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-33,-13,-48,-14,-50,-24,-27,-28,-29,-30,-36,-38,-40,69,-2,-12,-31,-15,-17,-34,-49,-51,-22,-23,-25,-26,-32,-35,-37,-39,-41,-16,-20,-19,-21,-18,]),'ELSE':([3,4,5,6,7,8,9,10,11,19,24,25,26,27,28,30,31,32,33,36,37,38,44,45,53,55,69,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,91,93,95,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-33,-13,-48,-14,-50,-24,-27,-28,-29,-30,-36,-38,-40,-2,-12,-31,-15,-17,-34,-49,-51,-22,-23,-25,-26,-32,-35,-37,-39,-41,-16,88,90,-19,-21,-18,]),'ASSIGN':([12,19,72,],[22,-33,-34,]),'LBRACK':([12,19,25,31,72,],[23,-33,23,23,-34,]),'NUM':([14,15,20,22,23,29,34,39,48,49,50,51,52,56,57,58,59,60,61,62,63,64,67,85,89,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-42,-43,-44,-45,-46,-47,32,32,32,]),'LITERAL_STR':([14,15,20,22,23,29,34,39,48,49,50,51,52,56,57,58,59,60,61,62,63,64,67,85,89,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-42,-43,-44,-45,-46,-47,33,33,33,]),'SUB':([14,15,19,20,22,23,27,28,29,30,31,32,33,34,38,39,46,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,66,67,72,74,75,76,77,78,79,82,85,89,],[29,29,-33,29,29,29,50,-24,29,-27,-28,-29,-30,29,50,29,50,29,29,29,29,29,-31,50,29,29,29,-42,-43,-44,-45,-46,-47,50,29,-34,50,-22,-23,-25,-26,-32,50,29,29,]),'LPAREN':([14,15,20,22,23,29,34,39,48,49,50,51,52,56,57,58,59,60,61,62,63,64,67,70,85,89,],[34,39,39,39,34,34,34,39,34,34,34,34,34,39,39,34,-42,-43,-44,-45,-46,-47,39,85,34,34,]),'COMMA':([19,25,26,27,28,30,31,32,33,53,72,74,75,76,77,78,79,],[-33,47,48,-50,-24,-27,-28,-29,-30,-31,-34,-51,-22,-23,-25,-26,-32,]),'MUL':([19,28,30,31,32,33,53,72,75,76,77,78,79,],[-33,51,-27,-28,-29,-30,-31,-34,51,51,-25,-26,-32,]),'DIV':([19,28,30,31,32,33,53,72,75,76,77,78,79,],[-33,52,-27,-28,-29,-30,-31,-34,52,52,-25,-26,-32,]),'ADD':([19,27,28,30,31,32,33,38,46,53,54,66,72,74,75,76,77,78,79,82,],[-33,49,-24,-27,-28,-29,-30,49,49,-31,49,49,-34,49,-22,-23,-25,-26,-32,49,]),'LT':([19,28,30,31,32,33,37,38,53,66,72,75,76,77,78,79,81,82,83,],[-33,-24,-27,-28,-29,-30,59,-40,-31,-40,-34,-22,-23,-25,-26,-32,59,-39,-41,]),'GT':([19,28,30,31,32,33,37,38,53,66,72,75,76,77,78,79,81,82,83,],[-33,-24,-27,-28,-29,-30,60,-40,-31,-40,-34,-22,-23,-25,-26,-32,60,-39,-41,]),'LEQ':([19,28,30,31,32,33,37,38,53,66,72,75,76,77,78,79,81,82,83,],[-33,-24,-27,-28,-29,-30,61,-40,-31,-40,-34,-22,-23,-25,-26,-32,61,-39,-41,]),'GEQ':([19,28,30,31,32,33,37,38,53,66,72,75,76,77,78,79,81,82,83,],[-33,-24,-27,-28,-29,-30,62,-40,-31,-40,-34,-22,-23,-25,-26,-32,62,-39,-41,]),'EQ':([19,28,30,31,32,33,37,38,53,66,72,75,76,77,78,79,81,82,83,],[-33,-24,-27,-28,-29,-30,63,-40,-31,-40,-34,-22,-23,-25,-26,-32,63,-39,-41,]),'NEQ':([19,28,30,31,32,33,37,38,53,66,72,75,76,77,78,79,81,82,83,],[-33,-24,-27,-28,-29,-30,64,-40,-31,-40,-34,-22,-23,-25,-26,-32,64,-39,-41,]),'OR':([19,28,30,31,32,33,36,37,38,53,66,72,75,76,77,78,79,80,81,82,83,],[-33,-24,-27,-28,-29,-30,57,-38,-40,-31,-40,-34,-22,-23,-25,-26,-32,57,-37,-39,-41,]),'AND':([19,28,30,31,32,33,35,36,37,38,43,45,53,65,66,72,75,76,77,78,79,80,81,82,83,84,],[-33,-24,-27,-28,-29,-30,56,-36,-38,-40,56,56,-31,56,-40,-34,-22,-23,-25,-26,-32,-35,-37,-39,-41,56,]),'THEN':([19,28,30,31,32,33,36,37,38,43,53,72,75,76,77,78,79,80,81,82,83,],[-33,-24,-27,-28,-29,-30,-36,-38,-40,71,-31,-34,-22,-23,-25,-26,-32,-35,-37,-39,-41,]),'RBRACK':([19,28,30,31,32,33,46,53,72,75,76,77,78,79,],[-33,-24,-27,-28,-29,-30,72,-31,-34,-22,-23,-25,-26,-32,]),'RPAREN':([19,28,30,31,32,33,36,37,38,53,54,65,66,72,75,76,77,78,79,80,81,82,83,92,],[-33,-24,-27,-28,-29,-30,-36,-38,-40,-31,79,83,79,-34,-22,-23,-25,-26,-32,-35,-37,-39,-41,94,]),'COLON':([19,31,32,33,53,72,79,87,],[-33,-28,-29,-30,-31,-34,-32,89,]),'IN':([42,],[70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,16,17,71,],[2,40,41,86,]),'stmt':([0,16,17,21,68,71,90,94,],[3,3,3,44,44,3,93,95,]),'assignment':([0,16,17,21,68,71,90,94,],[4,4,4,4,4,4,4,4,]),'read':([0,16,17,21,68,71,90,94,],[5,5,5,5,5,5,5,5,]),'write':([0,16,17,21,68,71,90,94,],[6,6,6,6,6,6,6,6,]),'while':([0,16,17,21,68,71,90,94,],[7,7,7,7,7,7,7,7,]),'repeat':([0,16,17,21,68,71,90,94,],[8,8,8,8,8,8,8,8,]),'block':([0,16,17,21,35,68,71,90,94,],[9,9,9,9,55,9,9,9,9,]),'foreach':([0,16,17,21,68,71,90,94,],[10,10,10,10,10,10,10,10,]),'if_stmt':([0,16,17,21,68,71,90,94,],[11,11,11,11,11,11,11,11,]),'varref':([0,13,14,15,16,17,20,21,22,23,29,34,39,47,48,49,50,51,52,56,57,58,67,68,71,85,89,90,94,],[12,25,31,31,12,12,31,12,31,31,31,31,31,25,31,31,31,31,31,31,31,31,31,12,12,31,31,12,12,]),'varlist':([13,47,],[24,73,]),'expr_list':([14,],[26,]),'a_expr':([14,15,20,22,23,34,39,48,56,57,58,67,],[27,38,38,38,46,54,66,74,38,38,82,38,]),'a_term':([14,15,20,22,23,34,39,48,49,50,56,57,58,67,],[28,28,28,28,28,28,28,28,75,76,28,28,28,28,]),'a_fact':([14,15,20,22,23,29,34,39,48,49,50,51,52,56,57,58,67,85,89,],[30,30,30,30,30,53,30,30,30,30,30,77,78,30,30,30,30,87,92,]),'l_expr':([15,20,22,39,67,],[35,43,45,65,84,]),'l_term':([15,20,22,39,56,67,],[36,36,36,36,80,36,]),'l_fact':([15,20,22,39,56,57,67,],[37,37,37,37,37,81,37,]),'oprel':([37,81,],[58,58,]),'else_stmt':([88,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list SEMICOLON','program',2,'p_program','ply-parser.py',82),
  ('stmt_list -> stmt_list SEMICOLON stmt','stmt_list',3,'p_stmt_list','ply-parser.py',85),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','ply-parser.py',86),
  ('stmt -> assignment','stmt',1,'p_stmt','ply-parser.py',89),
  ('stmt -> read','stmt',1,'p_stmt','ply-parser.py',90),
  ('stmt -> write','stmt',1,'p_stmt','ply-parser.py',91),
  ('stmt -> while','stmt',1,'p_stmt','ply-parser.py',92),
  ('stmt -> repeat','stmt',1,'p_stmt','ply-parser.py',93),
  ('stmt -> block','stmt',1,'p_stmt','ply-parser.py',94),
  ('stmt -> foreach','stmt',1,'p_stmt','ply-parser.py',95),
  ('stmt -> if_stmt','stmt',1,'p_stmt','ply-parser.py',96),
  ('assignment -> varref ASSIGN l_expr','assignment',3,'p_assignment','ply-parser.py',99),
  ('read -> READ varlist','read',2,'p_read','ply-parser.py',102),
  ('write -> WRITE expr_list','write',2,'p_write','ply-parser.py',105),
  ('while -> WHILE l_expr block','while',3,'p_while','ply-parser.py',108),
  ('repeat -> REPEAT stmt_list UNTIL l_expr','repeat',4,'p_repeat','ply-parser.py',111),
  ('block -> BEGIN stmt_list END','block',3,'p_block','ply-parser.py',114),
  ('foreach -> FOREACH ID IN LPAREN a_fact COLON a_fact RPAREN stmt','foreach',9,'p_foreach','ply-parser.py',117),
  ('if_stmt -> IF l_expr THEN stmt_list ELSE else_stmt','if_stmt',6,'p_if_stmt','ply-parser.py',120),
  ('else_stmt -> <empty>','else_stmt',0,'p_else_stmt','ply-parser.py',123),
  ('else_stmt -> ELSE stmt','else_stmt',2,'p_else_stmt','ply-parser.py',124),
  ('a_expr -> a_expr ADD a_term','a_expr',3,'p_a_expr','ply-parser.py',127),
  ('a_expr -> a_expr SUB a_term','a_expr',3,'p_a_expr','ply-parser.py',128),
  ('a_expr -> a_term','a_expr',1,'p_a_expr','ply-parser.py',129),
  ('a_term -> a_term MUL a_fact','a_term',3,'p_a_term','ply-parser.py',132),
  ('a_term -> a_term DIV a_fact','a_term',3,'p_a_term','ply-parser.py',133),
  ('a_term -> a_fact','a_term',1,'p_a_term','ply-parser.py',134),
  ('a_fact -> varref','a_fact',1,'p_a_fact','ply-parser.py',137),
  ('a_fact -> NUM','a_fact',1,'p_a_fact','ply-parser.py',138),
  ('a_fact -> LITERAL_STR','a_fact',1,'p_a_fact','ply-parser.py',139),
  ('a_fact -> SUB a_fact','a_fact',2,'p_a_fact','ply-parser.py',140),
  ('a_fact -> LPAREN a_expr RPAREN','a_fact',3,'p_a_fact','ply-parser.py',141),
  ('varref -> ID','varref',1,'p_varref','ply-parser.py',144),
  ('varref -> varref LBRACK a_expr RBRACK','varref',4,'p_varref','ply-parser.py',145),
  ('l_expr -> l_expr AND l_term','l_expr',3,'p_l_expr','ply-parser.py',148),
  ('l_expr -> l_term','l_expr',1,'p_l_expr','ply-parser.py',149),
  ('l_term -> l_term OR l_fact','l_term',3,'p_l_term','ply-parser.py',152),
  ('l_term -> l_fact','l_term',1,'p_l_term','ply-parser.py',153),
  ('l_fact -> l_fact oprel a_expr','l_fact',3,'p_l_fact','ply-parser.py',156),
  ('l_fact -> a_expr','l_fact',1,'p_l_fact','ply-parser.py',157),
  ('l_fact -> LPAREN l_expr RPAREN','l_fact',3,'p_l_fact','ply-parser.py',158),
  ('oprel -> LT','oprel',1,'p_oprel','ply-parser.py',161),
  ('oprel -> GT','oprel',1,'p_oprel','ply-parser.py',162),
  ('oprel -> LEQ','oprel',1,'p_oprel','ply-parser.py',163),
  ('oprel -> GEQ','oprel',1,'p_oprel','ply-parser.py',164),
  ('oprel -> EQ','oprel',1,'p_oprel','ply-parser.py',165),
  ('oprel -> NEQ','oprel',1,'p_oprel','ply-parser.py',166),
  ('varlist -> varref','varlist',1,'p_varlist','ply-parser.py',169),
  ('varlist -> varref COMMA varlist','varlist',3,'p_varlist','ply-parser.py',170),
  ('expr_list -> a_expr','expr_list',1,'p_expr_list','ply-parser.py',173),
  ('expr_list -> expr_list COMMA a_expr','expr_list',3,'p_expr_list','ply-parser.py',174),
]
