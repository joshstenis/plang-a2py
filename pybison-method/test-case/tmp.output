Grammar

    0 $accept: a_expr $end

    1 a_expr: a_expr T_ADD a_expr
    2       | a_expr T_SUB a_expr
    3       | a_expr T_MUL a_expr
    4       | a_expr T_DIV a_expr
    5       | T_NUM


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_NUM (258) 5
    T_ADD (259) 1
    T_SUB (260) 2
    T_MUL (261) 3
    T_DIV (262) 4


Nonterminals, with rules where they appear

    $accept (8)
        on left: 0
    a_expr (9)
        on left: 1 2 3 4 5
        on right: 0 1 2 3 4


State 0

    0 $accept: . a_expr $end

    T_NUM  shift, and go to state 1

    a_expr  go to state 2


State 1

    5 a_expr: T_NUM .

    $default  reduce using rule 5 (a_expr)


State 2

    0 $accept: a_expr . $end
    1 a_expr: a_expr . T_ADD a_expr
    2       | a_expr . T_SUB a_expr
    3       | a_expr . T_MUL a_expr
    4       | a_expr . T_DIV a_expr

    $end   shift, and go to state 3
    T_ADD  shift, and go to state 4
    T_SUB  shift, and go to state 5
    T_MUL  shift, and go to state 6
    T_DIV  shift, and go to state 7


State 3

    0 $accept: a_expr $end .

    $default  accept


State 4

    1 a_expr: a_expr T_ADD . a_expr

    T_NUM  shift, and go to state 1

    a_expr  go to state 8


State 5

    2 a_expr: a_expr T_SUB . a_expr

    T_NUM  shift, and go to state 1

    a_expr  go to state 9


State 6

    3 a_expr: a_expr T_MUL . a_expr

    T_NUM  shift, and go to state 1

    a_expr  go to state 10


State 7

    4 a_expr: a_expr T_DIV . a_expr

    T_NUM  shift, and go to state 1

    a_expr  go to state 11


State 8

    1 a_expr: a_expr . T_ADD a_expr
    1       | a_expr T_ADD a_expr .
    2       | a_expr . T_SUB a_expr
    3       | a_expr . T_MUL a_expr
    4       | a_expr . T_DIV a_expr

    T_MUL  shift, and go to state 6
    T_DIV  shift, and go to state 7

    $default  reduce using rule 1 (a_expr)


State 9

    1 a_expr: a_expr . T_ADD a_expr
    2       | a_expr . T_SUB a_expr
    2       | a_expr T_SUB a_expr .
    3       | a_expr . T_MUL a_expr
    4       | a_expr . T_DIV a_expr

    T_MUL  shift, and go to state 6
    T_DIV  shift, and go to state 7

    $default  reduce using rule 2 (a_expr)


State 10

    1 a_expr: a_expr . T_ADD a_expr
    2       | a_expr . T_SUB a_expr
    3       | a_expr . T_MUL a_expr
    3       | a_expr T_MUL a_expr .
    4       | a_expr . T_DIV a_expr

    $default  reduce using rule 3 (a_expr)


State 11

    1 a_expr: a_expr . T_ADD a_expr
    2       | a_expr . T_SUB a_expr
    3       | a_expr . T_MUL a_expr
    4       | a_expr . T_DIV a_expr
    4       | a_expr T_DIV a_expr .

    $default  reduce using rule 4 (a_expr)
